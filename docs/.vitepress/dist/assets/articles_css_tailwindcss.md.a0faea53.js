import{_ as l,o as i,c as a,Q as e}from"./chunks/framework.d7a29f29.js";const x=JSON.parse('{"title":"Tailwind CSS 常用原子类","description":"","frontmatter":{},"headers":[],"relativePath":"articles/css/tailwindcss.md","filePath":"articles/css/tailwindcss.md"}'),r={name:"articles/css/tailwindcss.md"},t=e('<h1 id="tailwind-css-常用原子类" tabindex="-1">Tailwind CSS 常用原子类 <a class="header-anchor" href="#tailwind-css-常用原子类" aria-label="Permalink to &quot;Tailwind CSS 常用原子类&quot;">​</a></h1><p>Tailwind CSS 提供了大量的实用程序类，这些类名都是使用缩写的方式，以更简洁地表述其含义。以下是一些常用的 Tailwind CSS 缩写及其对应的意义：</p><h2 id="_1-布局" tabindex="-1">1. 布局 <a class="header-anchor" href="#_1-布局" aria-label="Permalink to &quot;1. 布局&quot;">​</a></h2><ul><li><p>w: width</p></li><li><p>max-w: max-width</p></li><li><p>h: height</p></li><li><p>max-h: max-height</p></li><li><p>m: margin</p></li><li><p>mt: margin-top</p></li><li><p>mb: margin-bottom</p></li><li><p>ml: margin-left</p></li><li><p>mr: margin-right</p></li><li><p>p: padding</p></li><li><p>pt: padding-top</p></li><li><p>pb: padding-bottom</p></li><li><p>pl: padding-left</p></li><li><p>pr: padding-right</p></li></ul><h2 id="_2-文本样式" tabindex="-1">2. 文本样式 <a class="header-anchor" href="#_2-文本样式" aria-label="Permalink to &quot;2. 文本样式&quot;">​</a></h2><ul><li><p>font: font-family</p></li><li><p>text: text-color, text-alignment, text-transform, font-size</p></li><li><p>leading：line-height</p></li><li><p>tracking: letter-spacing</p></li><li><p>uppercase: text-transform: uppercase</p></li><li><p>lowercase: text-transform: lowercase</p></li></ul><h2 id="_3-背景和边框" tabindex="-1">3. 背景和边框 <a class="header-anchor" href="#_3-背景和边框" aria-label="Permalink to &quot;3. 背景和边框&quot;">​</a></h2><ul><li><p>bg: background-color</p></li><li><p>border: border-style, border-width, border-color</p></li><li><p>rounded: border-radius</p></li><li><p>shadow: box-shadow</p></li></ul><h2 id="_4-弹性盒子布局" tabindex="-1">4. 弹性盒子布局 <a class="header-anchor" href="#_4-弹性盒子布局" aria-label="Permalink to &quot;4. 弹性盒子布局&quot;">​</a></h2><ul><li><p>flex: display: flex</p></li><li><p>justify: justify-content</p></li><li><p>items: align-items</p></li><li><p>self: align-self</p></li><li><p>order: order</p></li><li><p>flex-grow: flex-grow</p></li><li><p>flex-shrink: flex-shrink</p></li></ul><h2 id="_5-网格布局" tabindex="-1">5. 网格布局 <a class="header-anchor" href="#_5-网格布局" aria-label="Permalink to &quot;5. 网格布局&quot;">​</a></h2><ul><li><p>grid-cols: grid-template-columns</p></li><li><p>grid-rows: grid-template-rows</p></li><li><p>gap: grid-gap</p></li></ul><h2 id="_6-响应式设计" tabindex="-1">6. 响应式设计 <a class="header-anchor" href="#_6-响应式设计" aria-label="Permalink to &quot;6. 响应式设计&quot;">​</a></h2><ul><li><p>sm, md, lg, xl: 分别对应移动设备、平板、桌面、大屏幕</p></li><li><p>hover: 鼠标悬停时的样式</p></li><li><p>focus: 元素获取焦点时的样式</p></li></ul><h2 id="_7-边框和分隔符" tabindex="-1">7. 边框和分隔符 <a class="header-anchor" href="#_7-边框和分隔符" aria-label="Permalink to &quot;7. 边框和分隔符&quot;">​</a></h2><ul><li><p>divide: 分隔符 (border-color, border-style, border-width)</p></li><li><p>divide-x: 水平分隔符 (border-color, border-style, border-width)</p></li><li><p>divide-y: 垂直分隔符 (border-color, border-style, border-width)</p></li><li><p>border-collapse: 设置边框是否合并</p></li></ul><h2 id="_8-flexbox-尺寸和排列" tabindex="-1">8. Flexbox 尺寸和排列 <a class="header-anchor" href="#_8-flexbox-尺寸和排列" aria-label="Permalink to &quot;8. Flexbox 尺寸和排列&quot;">​</a></h2><ul><li><p>flex-wrap: 等同于 flex-flow 中的 wrap</p></li><li><p>flex-row, flex-row-reverse, flex-col, flex-col-reverse: flex-direction 的简写</p></li><li><p>flex-1...flex-12: 设置 flex-grow、flex-shrink 和 flex-basis 属性</p></li><li><p>gap-x: 水平包裹在对象（如 flex 子元素）之间的间距。</p></li><li><p>gap-y: 垂直包裹在对象（如 flex 子元素）之间的间距。</p></li><li><p>space-x: 水平排列中对象（如 flex 子元素）之间的空间</p></li><li><p>space-y: 垂直排列中对象（如 flex 子元素）之间的空间</p></li></ul><h2 id="_9-z-index" tabindex="-1">9. Z-index <a class="header-anchor" href="#_9-z-index" aria-label="Permalink to &quot;9. Z-index&quot;">​</a></h2><ul><li>z-{n}: 设置 z-index 的值，其中 n 为正整数</li></ul><h2 id="_10-动画" tabindex="-1">10. 动画 <a class="header-anchor" href="#_10-动画" aria-label="Permalink to &quot;10. 动画&quot;">​</a></h2><ul><li>animate-{name}: 向元素添加动画（使用 @keyframes 中定义的动画名称）</li></ul><h2 id="_11-列表样式" tabindex="-1">11. 列表样式 <a class="header-anchor" href="#_11-列表样式" aria-label="Permalink to &quot;11. 列表样式&quot;">​</a></h2><ul><li>list-style-{type}: 设置列表项的类型 (disc, decimal, decimal-leading-zero)</li></ul><h2 id="_12-转换和过渡" tabindex="-1">12. 转换和过渡 <a class="header-anchor" href="#_12-转换和过渡" aria-label="Permalink to &quot;12. 转换和过渡&quot;">​</a></h2><ul><li><p>transform: 让元素旋转、缩放、倾斜、平移等</p></li><li><p>transition-{property}: 用于添加一个过度效果 {property} 的值是必需的。</p></li></ul><h2 id="_13-颜色" tabindex="-1">13. 颜色 <a class="header-anchor" href="#_13-颜色" aria-label="Permalink to &quot;13. 颜色&quot;">​</a></h2><ul><li><p>text-{color}: 设置文本颜色</p></li><li><p>bg-{color}: 设置背景颜色</p></li><li><p>border-{color}: 设置边框颜色</p></li></ul><h2 id="_14-字体权重" tabindex="-1">14. 字体权重 <a class="header-anchor" href="#_14-字体权重" aria-label="Permalink to &quot;14. 字体权重&quot;">​</a></h2><ul><li><p>font-thin: 字体细</p></li><li><p>font-light: 字体轻</p></li><li><p>font-normal: 字体正常</p></li><li><p>font-medium: 字体中等</p></li><li><p>font-semibold: 字体半粗</p></li><li><p>font-bold: 字体粗</p></li><li><p>font-extrabold: 字体特粗</p></li><li><p>font-black: 字体黑</p></li></ul><h2 id="_15-svg" tabindex="-1">15. SVG <a class="header-anchor" href="#_15-svg" aria-label="Permalink to &quot;15. SVG&quot;">​</a></h2><ul><li><p>fill-{color}: 设置 SVG 填充颜色</p></li><li><p>stroke-{color}: 设置 SVG 描边颜色</p></li></ul><h2 id="_16-显示和隐藏" tabindex="-1">16. 显示和隐藏 <a class="header-anchor" href="#_16-显示和隐藏" aria-label="Permalink to &quot;16. 显示和隐藏&quot;">​</a></h2><ul><li><p>hidden: 隐藏元素（display: none）</p></li><li><p>invisible: 隐藏元素，但仍保留该元素的布局和尺寸</p></li><li><p>visible: 显示元素</p></li></ul><h2 id="_17-清除浮动" tabindex="-1">17. 清除浮动 <a class="header-anchor" href="#_17-清除浮动" aria-label="Permalink to &quot;17. 清除浮动&quot;">​</a></h2><ul><li>clear-{direction}: 清除某个方向的浮动效果</li></ul><h2 id="_18-容器" tabindex="-1">18. 容器 <a class="header-anchor" href="#_18-容器" aria-label="Permalink to &quot;18. 容器&quot;">​</a></h2><ul><li><p>container: 将内容限制在最大宽度的容器内部</p></li><li><p>mx-auto: 实现水平居中（margin-left 和 margin-right 设置为 auto）</p></li></ul><p>以上是一些常用的 Tailwind CSS 缩写及其对应的意义，覆盖了基础的布局、文本、背景、边框、弹性盒子布局、网格布局和响应式设计，有助于更快速地开发出具有良好用户体验的 Web 应用程序。</p>',39),o=[t];function p(d,n,s,h,c,u){return i(),a("div",null,o)}const b=l(r,[["render",p]]);export{x as __pageData,b as default};
