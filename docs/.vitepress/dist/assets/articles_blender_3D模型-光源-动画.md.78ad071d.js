import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.9f730de1.js";const h=JSON.parse('{"title":"3D模型格式详解","description":"","frontmatter":{},"headers":[],"relativePath":"articles/blender/3D模型-光源-动画.md","filePath":"articles/blender/3D模型-光源-动画.md"}'),p={name:"articles/blender/3D模型-光源-动画.md"},o=l(`<h1 id="_3d模型格式详解" tabindex="-1">3D模型格式详解 <a class="header-anchor" href="#_3d模型格式详解" aria-label="Permalink to &quot;3D模型格式详解&quot;">​</a></h1><h2 id="obj-格式" tabindex="-1">OBJ 格式 <a class="header-anchor" href="#obj-格式" aria-label="Permalink to &quot;OBJ 格式&quot;">​</a></h2><p>OBJ 格式适用于 3D 软件模型之间的互导。几乎所有的 3D 软件都支持 OBJ 格式的读取，本质上它是一种文本文件。 OBJ 格式只是 3D 模型文件，它不包含动画、材质特性、贴图路径等 3D 模型特质。</p><h2 id="fbx-格式" tabindex="-1">FBX 格式 <a class="header-anchor" href="#fbx-格式" aria-label="Permalink to &quot;FBX 格式&quot;">​</a></h2><p>FBX 格式可以视为 OBJ 格式的升级版，它不仅是一个 3D 模型格式，更可以视为一个通用的模型格式，它包含动画、材质特性、贴图、骨骼动画、灯光、摄像机等信息。FBX 格式支持多边形游戏模型、曲线、表面、点组材质。</p><p>FBX 格式经常用于游戏，是一种比较成熟的 3D 模型格式。</p><p>FBX 缺点也很明显，它是一个封闭格式，除开创者 Autodesk 外，其余很难对它进行更新。</p><h2 id="stl-格式" tabindex="-1">STL 格式 <a class="header-anchor" href="#stl-格式" aria-label="Permalink to &quot;STL 格式&quot;">​</a></h2><p>STL 不能算是一种 3D 模型格式，它不支持颜色、材质、光照、纹理等 3D 模型信息，只能描述三维物体的几何信息，因此在 Three 导入时，通常不会把它视为第一序列的选择。</p><h2 id="gltf-推荐" tabindex="-1">GLTF(推荐) <a class="header-anchor" href="#gltf-推荐" aria-label="Permalink to &quot;GLTF(推荐)&quot;">​</a></h2><p>GLTF 格式几乎所有的框架都可以支持，也是官方极力推荐的格式。可以说，它就是为 3D 模型格式而诞生的，GLTF 跨平台格式已成为 Web 上的 3D 对象标准及 Web 导出的通用标准。 GLTF 文件可以包含模型、动画、几何体、材质、灯光、相机等 3D 模型属性，甚至它还可以包含整个场景。也就是说，你可以在外部创建整个模型的场景，然后直接加载到 Three 中。</p><h2 id="gltf-格式有两种扩展名" tabindex="-1">GLTF 格式有两种扩展名 <a class="header-anchor" href="#gltf-格式有两种扩展名" aria-label="Permalink to &quot;GLTF 格式有两种扩展名&quot;">​</a></h2><ol><li><p>gltf: gltf 格式文件没有被压缩，会附带额外的 bin 数据文件，在文本编辑器中容易阅读，方便进行调试。</p></li><li><p>glb: 所有数据都包含在二进制文件中，文件小，推荐使用</p></li></ol><h2 id="gltf格式包含的数据" tabindex="-1">GLTF格式包含的数据 <a class="header-anchor" href="#gltf格式包含的数据" aria-label="Permalink to &quot;GLTF格式包含的数据&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">animations</span><span style="color:#E1E4E8;">: [AnimationClip],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">asset</span><span style="color:#E1E4E8;">: {</span><span style="color:#B392F0;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2.0&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">generator</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;THREE.GLTFExporter&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cameras</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parser</span><span style="color:#E1E4E8;">: GLTFParser {</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">: {…}, </span><span style="color:#B392F0;">extensions</span><span style="color:#E1E4E8;">: {…}, </span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">: {…}, </span><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;">: {…}, </span><span style="color:#B392F0;">cache</span><span style="color:#E1E4E8;">: {…}, …},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">scene</span><span style="color:#E1E4E8;">: Group {</span><span style="color:#B392F0;">isObject3D</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">uuid</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;06006dfc-5ae0-49b3-ba2e-cd32ae0dd256&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;AuxScene&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Group&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">parent</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, …},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">scenes</span><span style="color:#E1E4E8;">: [Group],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">userData</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">animations</span><span style="color:#24292E;">: [AnimationClip],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">asset</span><span style="color:#24292E;">: {</span><span style="color:#6F42C1;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2.0&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">generator</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;THREE.GLTFExporter&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">cameras</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parser</span><span style="color:#24292E;">: GLTFParser {</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">: {…}, </span><span style="color:#6F42C1;">extensions</span><span style="color:#24292E;">: {…}, </span><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">: {…}, </span><span style="color:#6F42C1;">options</span><span style="color:#24292E;">: {…}, </span><span style="color:#6F42C1;">cache</span><span style="color:#24292E;">: {…}, …},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">scene</span><span style="color:#24292E;">: Group {</span><span style="color:#6F42C1;">isObject3D</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">uuid</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;06006dfc-5ae0-49b3-ba2e-cd32ae0dd256&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;AuxScene&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Group&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">parent</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, …},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">scenes</span><span style="color:#24292E;">: [Group],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">userData</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>animations: 动画剪辑数组，GLTF 格式是可以包含动画效果的，本文使用的三只小鸟就包含了简单的飞行动画，后面我们来启用它。</li><li>asset: GLTF 文件的元数据，由 Blender 导出时创建</li><li>cameras: 一组相机</li><li>paser: GLTFLoader 的技术细节</li><li>scene: 模型存放的位置</li><li>scenes: GLTF 可以将多个场景存储在一个文件中</li><li>userData: 额外的一些非标准数据</li></ul><h2 id="模型光源" tabindex="-1">模型光源 <a class="header-anchor" href="#模型光源" aria-label="Permalink to &quot;模型光源&quot;">​</a></h2><p>模型导入threejs里通常是黑色的，需要添加光源</p><ul><li><p>DirectionalLight: 直射光，可以理解为手电筒，从放置处发出平行光。缺点也比较明显，只能照向一个位置，而且直射光很浪费性能，不建议使用太多。</p></li><li><p>AmbientLight: 环境光，从各个方向向场景中的每个对象添加恒定数量的光照，与现实中光的工作模式完全不同。用起来很简单，通常来配</p></li><li><p>DirectionalLight 来使用。但环境光由于各方向相同，无法显示出深度信息。</p></li><li><p>HemisphereLight: 半球光，光源在场景顶部的天空颜色和场景底部的地面颜色之间渐变，比较接近现实的光。半球光性能非常高，但其不从某一特定方向照射，因此通常和直射光配合使用实现某区域的高光效果。</p></li></ul><h2 id="模型动画" tabindex="-1">模型动画 <a class="header-anchor" href="#模型动画" aria-label="Permalink to &quot;模型动画&quot;">​</a></h2><p>animations 属性存储了模型的动画，我们需要按照 Three 的模式来启动动画帧。</p><p>首先使用 AnimationMixer 混合器将静态对象转化为动态对象，然后利用 AnimationAction 将动画连接至混合器，为每个模型添加 tick 方法，在帧更新时同时更新鸟的混合器。</p><ol><li><p>AnimationMixer 混合器</p><p>Three 场景中的动画对象对需要使用混合器，混合器控制模型的移动，因此后续通过更新混合器来实现动画帧的切换效果。</p></li><li><p>AnimationAction 动画的控制模块</p><p>动画效果通常由多个动作组成，该组件负责将每个动作进行动画剪辑，每个动画剪辑对应一个动作，该组件来控制动作的开启与暂停等控制功能。</p></li><li><p>tick 动画剪辑更新</p><p>AnimationAction 只是启动了动画，但动画真正开始播放需要更新渲染循环中的混合器。AnimationMixer 提供了 update 方法，允许根据时间参数来进行更新，通常使用帧——渲染循环更新时进行更新。</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupModel</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.scene.children[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取到动画</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">clip</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.animations[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 声明混合器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mixer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimationMixer</span><span style="color:#E1E4E8;">(model);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将动画按照动作进行动画剪辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">action</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mixer.</span><span style="color:#B392F0;">clipAction</span><span style="color:#E1E4E8;">(clip);</span></span>
<span class="line"><span style="color:#E1E4E8;">  action.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新混合器</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">tick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">delta</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> mixer.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(delta);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupModel</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.scene.children[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取到动画</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">clip</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.animations[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 声明混合器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mixer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimationMixer</span><span style="color:#24292E;">(model);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将动画按照动作进行动画剪辑</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">action</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mixer.</span><span style="color:#6F42C1;">clipAction</span><span style="color:#24292E;">(clip);</span></span>
<span class="line"><span style="color:#24292E;">  action.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新混合器</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">tick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">delta</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> mixer.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(delta);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">modelList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取模型后，放置到 birds 中</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadModel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">modelList.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(model);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">onst clock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Clock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(scene, camera);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取时间参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">delta</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clock.</span><span style="color:#B392F0;">getDelta</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 每一帧更新时更新混合器</span></span>
<span class="line"><span style="color:#E1E4E8;">  modelList.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">model</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#B392F0;">tick</span><span style="color:#E1E4E8;">(delta);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  controls </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> controls.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(render);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">modelList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取模型后，放置到 birds 中</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadModel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">modelList.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(model);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">onst clock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Clock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  renderer.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(scene, camera);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取时间参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">delta</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clock.</span><span style="color:#6F42C1;">getDelta</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 每一帧更新时更新混合器</span></span>
<span class="line"><span style="color:#24292E;">  modelList.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">model</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#6F42C1;">tick</span><span style="color:#24292E;">(delta);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  controls </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> controls.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(render);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7170868138068672548?searchId=2023121210235750905A7D18EF2072856B" target="_blank" rel="noreferrer">https://juejin.cn/post/7170868138068672548?searchId=2023121210235750905A7D18EF2072856B</a></li></ul>`,27),e=[o];function t(c,r,E,y,i,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
