import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.9f730de1.js";const C=JSON.parse('{"title":"webrtc","description":"","frontmatter":{},"headers":[],"relativePath":"articles/webrtc.md","filePath":"articles/webrtc.md"}'),p={name:"articles/webrtc.md"},o=l(`<h1 id="webrtc" tabindex="-1">webrtc <a class="header-anchor" href="#webrtc" aria-label="Permalink to &quot;webrtc&quot;">​</a></h1><ul><li><p>WebRTC（Web Real-Time Communication），一个可以让用户用自己流量 实现音视频实时通信的框架（APIs），支持浏览器（Firefox、Chrome、safari）以及 iOS、Android 原生系统。</p></li><li><p>getUserMedia: 获取麦克风和摄像头的许可，使得 WebRTC 可以拿到本地媒体流；</p></li><li><p>RTCPeerConnection: 建立点对点连接的关键，提供了创建，保持，监控，关闭连接的方法的实现。像媒体协商、收集候选地址都需要它来完成；</p></li><li><p>RTCDataChannel: 支持点对点数据传输，可用于传输文件、文本消息等。</p></li></ul><h2 id="音视频引擎" tabindex="-1">音视频引擎 <a class="header-anchor" href="#音视频引擎" aria-label="Permalink to &quot;音视频引擎&quot;">​</a></h2><p>有了 WebRTC，我们可以很方便的实现音视频通信；而如果没有 WebRTC 的情况下，我们想要实现音视频通信，就需要去了解音视频编码器相关技术。</p><p>WebRTC 内置了强大的音视频引擎，可以对媒体流进行编解码、回声消除、降噪、防止视频抖动等处理，我们使用者大可不用去关心如何实现 。主要使用的音视频编解码器有:</p><ul><li>OPUS: 一个开源的低延迟音频编解码器，WebRTC 默认使用；</li><li>G711: 国际电信联盟 ITU-T 定制出来的一套语音压缩标准，是主流的波形声音编解码器；</li><li>VP8: VP8，VP9，都是 Google 开源的视频编解码器，现在主要用于 WebRTC 视频编码；</li><li>H264: 视频编码领域的通用标准，提供了高效的视频压缩编码，之前 WebRTC 最先支持的是自己家的 VP8，后面也支持了 H264、H265 等。</li></ul><p>还有像回声消除<code>AEC(Acoustic Echo Chancellor)</code>、背景噪音抑制<code>ANS(Automatic Noise Suppression)</code>和<code>Jitter buffer</code>用来防止视频抖动，这些问题在 WebRTC 中也提供了非常成熟、稳定的算法，并且提供图像增加处理，例如美颜，贴图，滤镜处理等。</p><h2 id="网络-io" tabindex="-1">网络 IO <a class="header-anchor" href="#网络-io" aria-label="Permalink to &quot;网络 IO&quot;">​</a></h2><p>WebRTC 传输层用的是 UDP 协议，因为音视频传输对及时性要求更高，如果使用 TCP 当传输层协议的话，如果发生丢包的情况下，因为 TCP 的可靠性，就会尝试重连，如果第七次之后仍然超时，则断开 TCP 连接。而如果第七次收到消息，那么传输的延迟就会达到 2 分钟。在延迟高的情况下，想做到正常的实时通讯显然是不可能的，此时 TCP 的可靠性反而成了弊端。 而 UDP 则正好相反，它只负责有消息就传输，不管有没有收到，这里从底层来看是满足 WebRTC 的需求的，所以 WebRTC 是采用 UDP 来当它的传输层协议的。</p><p>这里主要用到以下几种协议/技术：</p><ul><li>RTP/SRTP: 传输音视频数据流时，我们并不直接将音视频数据流交给 UDP 传输，而是先给音视频数据加个 RTP 头，然后再交给 UDP 进行，但是由于浏览器对安全性要求比较高，增加了加密这块的处理，采用 SRTP 协议；</li><li>RTCP：通过 RTCP 可以知道各端的网络质量，这样对方就可以做流控处理；</li><li>P2P(ICE + STUN + TURN): 这是 WebRTC 最核心的技术，利用 ICE、STUN、TURN 等技术，实现了浏览器之间的直接点对点连接，解决了 NAT 穿透问题，实现了高质量的网络传输。</li></ul><p>除了以上三部分，WebRTC 还需要一个信令服务做会话管理，但 WebRTC 规范里没有包含信令协议，需要自行实现。</p><h2 id="通信过程" tabindex="-1">通信过程 <a class="header-anchor" href="#通信过程" aria-label="Permalink to &quot;通信过程&quot;">​</a></h2><p>基于以上，我们来思考下 WebRTC 实现一对一通信需要哪些基本条件？</p><ul><li>WebRTC 终端（两个）：本地和远端，负责音视频采集、编解码、NAT 穿越以及音视频数据传输等；</li><li>Signal 信令服务器：自行实现的信令服务，负责信令处理，如加入房间、离开房间、媒体协商消息的传递等；</li><li>STUN/TURN 服务器：负责获取 WebRTC 终端在公网的 IP 地址，以及 NAT 穿越失败后的数据中转服务。</li></ul><p>通信过程如下：</p><ul><li>本地（WebRTC 终端）启动后，检测设备可用性，如果可用后开始进行音视频采集工作；</li><li>本地就绪后，发送“加入房间”信令到 Signal 服务器；</li><li>Signal 服务器创建房间，等待加入；</li><li>对端（WebRTC 终端）同样操作，加入房间，并通知另一端；</li><li>双端创建媒体连接对象 RTCPeerConnection，进行媒体协商；</li><li>双端进行连通性测试，最终建立连接；</li><li>将采集到的音视频数据通过 RTCPeerConnection 对象进行编码，最终通过 P2P 传送给对端/本地，再进行解码、展示。</li></ul><blockquote><p>第 6 步在建立连接进行 P2P 穿越时很有可能失败。当 P2P 穿越失败时，为了保障音视频数据仍然可以互通，则需要通过 TURN 服务器进行音视频数据中转。后面会讲到 TURN 服务是什么，以及如何搭建 TURN 服务。</p></blockquote><h2 id="音视频三大架构" tabindex="-1">音视频三大架构 <a class="header-anchor" href="#音视频三大架构" aria-label="Permalink to &quot;音视频三大架构&quot;">​</a></h2><h3 id="mesh" tabindex="-1">mesh <a class="header-anchor" href="#mesh" aria-label="Permalink to &quot;mesh&quot;">​</a></h3><p>Mesh 架构是利用 Webrtc 对等连接，在参与会议的各方之间两两 P2P 连接，即 P2P2P2P，形成一个网状结构。</p><p>优势 👆</p><p>实现简单，只需要 ICE 服务器用于实现 P2P 穿越就行；</p><p>不需要服务器中转数据，节省开发和成本；</p><p>充分利用了客户端的带宽资源。</p><p>缺陷 👇</p><p>每端都需要将自己的媒体流发送到其他各端，并从其他各端获取流，占用带宽较多，参与人越多，占用的带宽就越大，所以对带宽的要求极高，Mesh 架构在真实的应用场景中几乎没有人使用。</p><h3 id="mcu" tabindex="-1">MCU <a class="header-anchor" href="#mcu" aria-label="Permalink to &quot;MCU&quot;">​</a></h3><p>MCU（Multipoint Conferencing Unit）架构由一个中心化的 MCU 服务器（对媒体流进行编码、转码、解码、混合处理）和多个终端组成一个星形结构。各终端将自己要共享的音视频流发送给服务器，服务端进行混合后再将复合流发到各端。</p><p>优势 👆</p><p>每个终端只需发送一份媒体流，再接收单个复合流，减少客户端带宽压力；</p><p>接收的复合流，所有参与人看到的是相同的画面，客户体验非常好。</p><p>缺陷 👇</p><p>需要一台强大的机器来解码、合成和重新编码这些大量运算的工作，对 CPU 资源的消耗很大。</p><h3 id="sfu" tabindex="-1">SFU <a class="header-anchor" href="#sfu" aria-label="Permalink to &quot;SFU&quot;">​</a></h3><p>SFU（Selective Forwarding Unit）架构同 MCU ，也是由一个中心化的服务器和多个终端组成，但与 MCU 不同的是，SFU 服务器不对音视频进行编码、解码、混流等算力较高的工作，只负责转发媒体或者存储媒体，实际上就是一个音视频路由转发器。 SFU 是最近几年流行的新架构，目前 WebRTC 多方通信媒体服务器大多都是 SFU 架构。</p><p>优势 👆</p><p>服务端压力相对较小，由于是数据包直接转发，不需要编码、解码，对 CPU 资源消耗很小；</p><p>直接转发也极大地降低了延迟，提高了实时性；</p><p>对客户端的宽带要求适中：针对低延迟、高带宽媒体转发进行了优化。</p><p>缺陷 👇</p><p>由于是数据包直接转发，参与人观看多路视频的时候可能会出现不同步；相同的视频流，不同的参与人看到的画面也可能不一致。</p><p>综合来说：SFU 是三种架构方案中优势最明显而劣势相对较少，是目前最优的一种多方通信架构方案。</p><p>开源实现</p><p>SFU 架构有一些比较流行的开源项目，像： Licode、Janus-gateway、MediaSoup、Medooze 等，感兴趣的小伙伴可以去了解。</p><h2 id="webrtc-实现步骤" tabindex="-1">webrtc 实现步骤 <a class="header-anchor" href="#webrtc-实现步骤" aria-label="Permalink to &quot;webrtc 实现步骤&quot;">​</a></h2><h2 id="_1-创建数据" tabindex="-1">1.创建数据 <a class="header-anchor" href="#_1-创建数据" aria-label="Permalink to &quot;1.创建数据&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建数据源</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">localStream</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> navigator.mediaDevices.</span><span style="color:#B392F0;">getUserMedia</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  video: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  audio: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 显示数据源，localVideo 是 html 中的 video 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">localVideo.srcObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> localStream;</span></span>
<span class="line"><span style="color:#E1E4E8;">localVideo.</span><span style="color:#B392F0;">onloadedmetadata</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  localVideo.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建数据源</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">localStream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> navigator.mediaDevices.</span><span style="color:#6F42C1;">getUserMedia</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  video: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  audio: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 显示数据源，localVideo 是 html 中的 video 标签</span></span>
<span class="line"><span style="color:#24292E;">localVideo.srcObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localStream;</span></span>
<span class="line"><span style="color:#24292E;">localVideo.</span><span style="color:#6F42C1;">onloadedmetadata</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  localVideo.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="_2-创建发送数据实例" tabindex="-1">2.创建发送数据实例 <a class="header-anchor" href="#_2-创建发送数据实例" aria-label="Permalink to &quot;2.创建发送数据实例&quot;">​</a></h2><p>用于发送步骤一中创建的数据：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 本地实例</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pc1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RTCPeerConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 对端实例</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pc2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RTCPeerConnection</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 本地实例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pc1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RTCPeerConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 对端实例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pc2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RTCPeerConnection</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="_3-配置实例" tabindex="-1">3.配置实例 <a class="header-anchor" href="#_3-配置实例" aria-label="Permalink to &quot;3.配置实例&quot;">​</a></h2><p>做这一步的目的是为了交换两端的信息 icecandidate  和  SDP</p><p>icecandidate： 包含通信协议(TCP/UDP)和通信 IP，STUN 和 TURN 协议中描述网络信息的格式规范，解决双方网络链接问题；</p><p>SDP： 浏览器能力，包括不限于音视频编码格式，带宽，流控策略等；解决前置思考中，双方能力不匹配问题，通过交换双方 SDP 浏览器会自动选择双方都支持的视频编码格式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 告诉对端，本端地址</span></span>
<span class="line"><span style="color:#E1E4E8;">pc1.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;icecandidate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 发送给对端</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对端添加本端地址</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc2.</span><span style="color:#B392F0;">addIceCandidate</span><span style="color:#E1E4E8;">(e.candidate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;icecandidate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 发送给本端</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 本端添加对端地址</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc1.</span><span style="color:#B392F0;">addIceCandidate</span><span style="color:#E1E4E8;">(e.candidate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建本端SDP,告诉本端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">offer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc1.</span><span style="color:#B392F0;">createOffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">pc1.</span><span style="color:#B392F0;">setLocalDescription</span><span style="color:#E1E4E8;">(offer);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建远端SDP,告诉远端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">answer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc2.</span><span style="color:#B392F0;">createAnswer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">setLocalDescription</span><span style="color:#E1E4E8;">(answer);</span></span>
<span class="line"><span style="color:#6A737D;">// 。。。。发送远端SDP给本端</span></span>
<span class="line"><span style="color:#6A737D;">// 接收远端sdp,告诉远端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#E1E4E8;">pc1.</span><span style="color:#B392F0;">setRemoteDescription</span><span style="color:#E1E4E8;">(answer);</span></span>
<span class="line"><span style="color:#6A737D;">// 接收客户端sdp,告诉远端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">setRemoteDescription</span><span style="color:#E1E4E8;">(offer);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 告诉对端，本端地址</span></span>
<span class="line"><span style="color:#24292E;">pc1.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;icecandidate&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 发送给对端</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对端添加本端地址</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc2.</span><span style="color:#6F42C1;">addIceCandidate</span><span style="color:#24292E;">(e.candidate);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;icecandidate&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 发送给本端</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 本端添加对端地址</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc1.</span><span style="color:#6F42C1;">addIceCandidate</span><span style="color:#24292E;">(e.candidate);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建本端SDP,告诉本端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">offer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc1.</span><span style="color:#6F42C1;">createOffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">pc1.</span><span style="color:#6F42C1;">setLocalDescription</span><span style="color:#24292E;">(offer);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建远端SDP,告诉远端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">answer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc2.</span><span style="color:#6F42C1;">createAnswer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">setLocalDescription</span><span style="color:#24292E;">(answer);</span></span>
<span class="line"><span style="color:#6A737D;">// 。。。。发送远端SDP给本端</span></span>
<span class="line"><span style="color:#6A737D;">// 接收远端sdp,告诉远端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#24292E;">pc1.</span><span style="color:#6F42C1;">setRemoteDescription</span><span style="color:#24292E;">(answer);</span></span>
<span class="line"><span style="color:#6A737D;">// 接收客户端sdp,告诉远端浏览器支持哪些能力</span></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">setRemoteDescription</span><span style="color:#24292E;">(offer);</span></span></code></pre></div><h2 id="_4-发送数据" tabindex="-1">4. 发送数据 <a class="header-anchor" href="#_4-发送数据" aria-label="Permalink to &quot;4. 发送数据&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">localStream.</span><span style="color:#B392F0;">getTracks</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">track</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> pc1.</span><span style="color:#B392F0;">addTrack</span><span style="color:#E1E4E8;">(track, localStream));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">localStream.</span><span style="color:#6F42C1;">getTracks</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">track</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> pc1.</span><span style="color:#6F42C1;">addTrack</span><span style="color:#24292E;">(track, localStream));</span></span></code></pre></div><h2 id="_5-接收数据" tabindex="-1">5.接收数据 <a class="header-anchor" href="#_5-接收数据" aria-label="Permalink to &quot;5.接收数据&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 接收远端数据</span></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;track&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  remoteVideo.srcObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.streams[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 接收远端数据</span></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;track&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  remoteVideo.srcObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.streams[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="_6-关闭连接" tabindex="-1">6.关闭连接 <a class="header-anchor" href="#_6-关闭连接" aria-label="Permalink to &quot;6.关闭连接&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 关闭连接</span></span>
<span class="line"><span style="color:#E1E4E8;">pc1.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 关闭连接</span></span>
<span class="line"><span style="color:#24292E;">pc1.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="完整代码" tabindex="-1">完整代码 <a class="header-anchor" href="#完整代码" aria-label="Permalink to &quot;完整代码&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pc1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RTCPeerConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">pc1.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;icecandidate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc2.</span><span style="color:#B392F0;">addIceCandidate</span><span style="color:#E1E4E8;">(e.candidate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">pc1.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;iceconnectionstatechange&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pc1: iceconnectionstatechange&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pc2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RTCPeerConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;icecandidate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc1.</span><span style="color:#B392F0;">addIceCandidate</span><span style="color:#E1E4E8;">(e.candidate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;iceconnectionstatechange&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pc2: iceconnectionstatechange&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pc2.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;track&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.streams.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    remoteVideo.srcObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.streams[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">remoteVideo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#remoteVideo&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTMLVideoElement</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">localVideo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#localVideo&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTMLVideoElement</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pushStream</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">answer</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RTCSessionDescriptionInit</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pc1.</span><span style="color:#B392F0;">setRemoteDescription</span><span style="color:#E1E4E8;">(answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pullStream</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">offer</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RTCSessionDescriptionInit</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pc2.</span><span style="color:#B392F0;">setRemoteDescription</span><span style="color:#E1E4E8;">(offer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">answer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc2.</span><span style="color:#B392F0;">createAnswer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  pc2.</span><span style="color:#B392F0;">setLocalDescription</span><span style="color:#E1E4E8;">(answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;answer&quot;</span><span style="color:#E1E4E8;">, answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pushStream</span><span style="color:#E1E4E8;">(answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">localStream</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> navigator.mediaDevices.</span><span style="color:#B392F0;">getUserMedia</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    video: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    audio: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  localVideo.srcObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> localStream;</span></span>
<span class="line"><span style="color:#E1E4E8;">  localStream.</span><span style="color:#B392F0;">getTracks</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">track</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> pc1.</span><span style="color:#B392F0;">addTrack</span><span style="color:#E1E4E8;">(track, localStream));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">offer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pc1.</span><span style="color:#B392F0;">createOffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  pc1.</span><span style="color:#B392F0;">setLocalDescription</span><span style="color:#E1E4E8;">(offer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pc1 offer&quot;</span><span style="color:#E1E4E8;">, offer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pullStream</span><span style="color:#E1E4E8;">(offer);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pc1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RTCPeerConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">pc1.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;icecandidate&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc2.</span><span style="color:#6F42C1;">addIceCandidate</span><span style="color:#24292E;">(e.candidate);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">pc1.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;iceconnectionstatechange&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pc1: iceconnectionstatechange&quot;</span><span style="color:#24292E;">, e);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pc2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RTCPeerConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;icecandidate&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.candidate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc1.</span><span style="color:#6F42C1;">addIceCandidate</span><span style="color:#24292E;">(e.candidate);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;iceconnectionstatechange&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pc2: iceconnectionstatechange&quot;</span><span style="color:#24292E;">, e);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pc2.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;track&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.streams.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    remoteVideo.srcObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.streams[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">remoteVideo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#remoteVideo&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLVideoElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">localVideo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#localVideo&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLVideoElement</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushStream</span><span style="color:#24292E;">(</span><span style="color:#E36209;">answer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RTCSessionDescriptionInit</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  pc1.</span><span style="color:#6F42C1;">setRemoteDescription</span><span style="color:#24292E;">(answer);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pullStream</span><span style="color:#24292E;">(</span><span style="color:#E36209;">offer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RTCSessionDescriptionInit</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  pc2.</span><span style="color:#6F42C1;">setRemoteDescription</span><span style="color:#24292E;">(offer);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">answer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc2.</span><span style="color:#6F42C1;">createAnswer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  pc2.</span><span style="color:#6F42C1;">setLocalDescription</span><span style="color:#24292E;">(answer);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;answer&quot;</span><span style="color:#24292E;">, answer);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pushStream</span><span style="color:#24292E;">(answer);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">localStream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> navigator.mediaDevices.</span><span style="color:#6F42C1;">getUserMedia</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    video: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    audio: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  localVideo.srcObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localStream;</span></span>
<span class="line"><span style="color:#24292E;">  localStream.</span><span style="color:#6F42C1;">getTracks</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">track</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> pc1.</span><span style="color:#6F42C1;">addTrack</span><span style="color:#24292E;">(track, localStream));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">offer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pc1.</span><span style="color:#6F42C1;">createOffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  pc1.</span><span style="color:#6F42C1;">setLocalDescription</span><span style="color:#24292E;">(offer);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pc1 offer&quot;</span><span style="color:#24292E;">, offer);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pullStream</span><span style="color:#24292E;">(offer);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,64),e=[o];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const u=s(p,[["render",c]]);export{C as __pageData,u as default};
