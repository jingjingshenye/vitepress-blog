import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.9f730de1.js";const m=JSON.parse('{"title":"commonjs 与 esmodule","description":"","frontmatter":{},"headers":[],"relativePath":"articles/commonjs与esmodule.md","filePath":"articles/commonjs与esmodule.md"}'),p={name:"articles/commonjs与esmodule.md"},o=l(`<h1 id="commonjs-与-esmodule" tabindex="-1">commonjs 与 esmodule <a class="header-anchor" href="#commonjs-与-esmodule" aria-label="Permalink to &quot;commonjs 与 esmodule&quot;">​</a></h1><h2 id="什么是-commonjs" tabindex="-1">什么是 CommonJS <a class="header-anchor" href="#什么是-commonjs" aria-label="Permalink to &quot;什么是 CommonJS&quot;">​</a></h2><p>CommonJS 是一种服务器端的模块规范，用于定义和导出模块。</p><p>CommonJS 模块输出的是一个值的拷贝，而非一个引用。</p><p>CommonJS 模块是运行在服务器环境下的，Node.js 采用了这个规范。</p><p>CommonJS 模块的运行机制是，在输入模块的时候，require()方法会加载该模块，并运行其中的代码。</p><h2 id="什么是-esmodule" tabindex="-1">什么是 ESModule <a class="header-anchor" href="#什么是-esmodule" aria-label="Permalink to &quot;什么是 ESModule&quot;">​</a></h2><p>ESModule 是一种浏览器端的模块规范，用于定义和导出模块。</p><p>ESModule 输出的是一个值的引用，而非拷贝。</p><p>ESModule 是运行在浏览器环境下的，浏览器采用了这个规范。</p><p>ESModule 的运行机制是，在输入模块的时候，import()方法会加载该模块，并返回该模块对外暴露的接口。</p><h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h2><p>CommonJS 和 ESModule 的区别主要有以下几点：</p><ol><li>输出值。CommonJS 输出的是值的拷贝，ESModule 输出的是值的引用。</li><li>加载方式。CommonJS 是运行在服务器端的，ESModule 是运行在浏览器端的。</li><li>运行机制。CommonJS 是通过 require()方法加载，ESModule 是通过 import()方法加载。</li></ol><h2 id="commonjs-原理" tabindex="-1">commonjs 原理 <a class="header-anchor" href="#commonjs-原理" aria-label="Permalink to &quot;commonjs 原理&quot;">​</a></h2><p>每个模块文件存在 module,export,require 三个对象</p><ul><li>module 记录当前模块信息。</li><li>export 引入模块的方法</li><li>require 对象代表对其他模块的引用。</li></ul><p>然而这三个变量是没有被定义的，但是我们可以在 Commonjs 规范下每一个 js 模块上直接使用它们。在 nodejs 中还存在 <strong>filename 和</strong>dirname 变量。</p><p>在编译的过程中，实际 Commonjs 对 js 的代码块进行了首尾包装， 我们以上述的 home.js 为例子 🌰，它被包装之后的样子如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">require</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__filename</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__dirname</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 你的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sayName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./hello.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#B392F0;">sayName</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      author: </span><span style="color:#9ECBFF;">&quot;我不是外星人&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">require</span><span style="color:#24292E;">, </span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__filename</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__dirname</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 你的代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sayName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./hello.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#6F42C1;">sayName</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      author: </span><span style="color:#032F62;">&quot;我不是外星人&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>在 Commonjs 规范下模块中，会形成一个包装函数，我们写的代码将作为包装函数的执行上下文，使用的 require ，exports ，module 本质上是通过形参的方式传递到包装函数中的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">script</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;(function (exports, require, module, __filename, __dirname) {&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    script </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">})&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">(</span><span style="color:#E36209;">script</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;(function (exports, require, module, __filename, __dirname) {&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    script </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">})&quot;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>包装函数执行</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modulefunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  const sayName = require(&#39;./hello.js&#39;)</span></span>
<span class="line"><span style="color:#9ECBFF;">    module.exports = function say(){</span></span>
<span class="line"><span style="color:#9ECBFF;">        return {</span></span>
<span class="line"><span style="color:#9ECBFF;">            name:sayName(),</span></span>
<span class="line"><span style="color:#9ECBFF;">            author:&#39;我不是外星人&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">        }</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">modulefunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  const sayName = require(&#39;./hello.js&#39;)</span></span>
<span class="line"><span style="color:#032F62;">    module.exports = function say(){</span></span>
<span class="line"><span style="color:#032F62;">        return {</span></span>
<span class="line"><span style="color:#032F62;">            name:sayName(),</span></span>
<span class="line"><span style="color:#032F62;">            author:&#39;我不是外星人&#39;</span></span>
<span class="line"><span style="color:#032F62;">        }</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span></code></pre></div><p>如上模拟了一个包装函数功能， script 为我们在 js 模块中写的内容，最后返回的就是如上包装之后的函数。当然这个函数暂且是一个字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">runInThisContext</span><span style="color:#E1E4E8;">(modulefunction)(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  require,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  __filename,</span></span>
<span class="line"><span style="color:#E1E4E8;">  __dirname</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">runInThisContext</span><span style="color:#24292E;">(modulefunction)(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  require,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  __filename,</span></span>
<span class="line"><span style="color:#24292E;">  __dirname</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>在模块加载的时候，会通过 runInThisContext (可以理解成 eval ) 执行 modulefunction ，传入 require ，exports ，module 等参数。最终我们写的 nodejs 文件就这么执行了。</p><h2 id="require-文件加载流程" tabindex="-1">require 文件加载流程 <a class="header-anchor" href="#require-文件加载流程" aria-label="Permalink to &quot;require 文件加载流程&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ①核心模块</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sayName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./hello.js&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//② 文件模块</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">crypto</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;crypto-js&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ③第三方自定义模块</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ①核心模块</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sayName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./hello.js&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//② 文件模块</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">crypto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;crypto-js&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ③第三方自定义模块</span></span></code></pre></div><p>如上三种方式</p><ol><li>为 nodejs 底层的核心模块。</li><li>为我们编写的文件模块，比如上述 sayName</li><li>为我们通过 npm 下载的第三方自定义模块，比如 crypto-js。</li></ol><p>当 require 方法执行的时候，接收的唯一参数作为一个标识符 ，Commonjs 下对不同的标识符，处理流程不同，但是目的相同，都是找到对应的模块。</p><p>首先我们看一下 nodejs 中对标识符的处理原则。</p><p>首先像 fs ，http ，path 等标识符，会被作为 nodejs 的核心模块。</p><p>./ 和 ../ 作为相对路径的文件模块， / 作为绝对路径的文件模块。</p><p>非路径形式也非核心模块的模块，将作为自定义模块。</p><p>核心模块的处理：</p><p>核心模块的优先级仅次于缓存加载，在 Node 源码编译中，已被编译成二进制代码，所以加载核心模块，加载过程中速度最快。</p><p>路径形式的文件模块处理：</p><p>已 ./ ，../ 和 / 开始的标识符，会被当作文件模块处理。require() 方法会将路径转换成真实路径，并以真实路径作为索引，将编译后的结果缓存起来，第二次加载的时候会更快。至于怎么缓存的？我们稍后会讲到。</p><p>自定义模块处理：</p><p>自定义模块，一般指的是非核心的模块，它可能是一个文件或者一个包，它的查找会遵循以下原则：</p><p>在当前目录下的 node_modules 目录查找。</p><p>如果没有，在父级目录的 node_modules 查找，</p><p>如果没有在父级目录的父级目录的 node_modules 中查找。</p><p>沿着路径向上递归，直到根目录下的 node_modules 目录。</p><p>在查找过程中，会找 package.json 下 main 属性指向的文件，如果没有 package.json ，在 node 环境下会以此查找 index.js ，index.json ，index.node。</p><h2 id="require-模块引入与处理" tabindex="-1">require 模块引入与处理 <a class="header-anchor" href="#require-模块引入与处理" aria-label="Permalink to &quot;require 模块引入与处理&quot;">​</a></h2><p>CommonJS 模块同步加载并执行模块文件，CommonJS 模块在执行阶段分析模块依赖，采用深度优先遍历（depth-first traversal），执行顺序是父 -&gt; 子 -&gt; 父；</p><p>commonjs 是如何解决相互引用的呢？</p><p>为了弄清楚上述问题。我们要明白两个感念，那就是 module 和 Module。</p><p><code>module</code> ：在 Node 中每一个 js 文件都是一个 module ，module 上保存了 exports 等信息之外，还有一个 loaded 表示该模块是否被加载</p><p><code>Module</code> ：以 nodejs 为例，整个系统运行之后，会用 Module 缓存每一个模块加载的信息</p><p>require 源码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// id 为路径标识符</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">/* 查找  Module 上有没有已经加载的 js  对象*/</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">cachedModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Module._cache[id]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">/* 如果已经加载了那么直接取走缓存的 exports 对象  */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(cachedModule){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cachedModule.exports</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 创建当前模块的 module  */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { exports: {} ,loaded: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> , </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */</span></span>
<span class="line"><span style="color:#E1E4E8;">  Module._cache[id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 加载文件 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runInThisContext</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;module.exports = &quot;123&quot;&#39;</span><span style="color:#E1E4E8;">))(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, require, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, __filename, __dirname)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 加载完成 */</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">loaded</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 返回值 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// require 会接收一个参数——文件标识符，然后分析定位文件，分析过程我们上述已经讲到了，加下来会从 Module 上查找有没有缓存，如果有缓存，那么直接返回缓存的内容。</span></span>
<span class="line"><span style="color:#6A737D;">// 如果没有缓存，会创建一个 module 对象，缓存到 Module 上，然后执行文件，加载完文件，将 loaded 属性设置为 true ，然后返回 module.exports 对象。借此完成模块加载流程。</span></span>
<span class="line"><span style="color:#6A737D;">// 模块导出就是 return 这个变量的其实跟 a = b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。</span></span>
<span class="line"><span style="color:#6A737D;">// exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports， 所以对 exports 进行赋值会导致 exports 操作的不再是 module.exports 的引用。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// id 为路径标识符</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">/* 查找  Module 上有没有已经加载的 js  对象*/</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">cachedModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Module._cache[id]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">/* 如果已经加载了那么直接取走缓存的 exports 对象  */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(cachedModule){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cachedModule.exports</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 创建当前模块的 module  */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { exports: {} ,loaded: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> , </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */</span></span>
<span class="line"><span style="color:#24292E;">  Module._cache[id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 加载文件 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runInThisContext</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;module.exports = &quot;123&quot;&#39;</span><span style="color:#24292E;">))(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, require, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, __filename, __dirname)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 加载完成 */</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">loaded</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 返回值 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// require 会接收一个参数——文件标识符，然后分析定位文件，分析过程我们上述已经讲到了，加下来会从 Module 上查找有没有缓存，如果有缓存，那么直接返回缓存的内容。</span></span>
<span class="line"><span style="color:#6A737D;">// 如果没有缓存，会创建一个 module 对象，缓存到 Module 上，然后执行文件，加载完文件，将 loaded 属性设置为 true ，然后返回 module.exports 对象。借此完成模块加载流程。</span></span>
<span class="line"><span style="color:#6A737D;">// 模块导出就是 return 这个变量的其实跟 a = b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。</span></span>
<span class="line"><span style="color:#6A737D;">// exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports， 所以对 exports 进行赋值会导致 exports 操作的不再是 module.exports 的引用。</span></span></code></pre></div><p>正式因为缓存<code>Module._cache</code>的存在，才避免重复加载和循环引用的问题。</p><p>但是循环引用还有一个问题，两个互相引用的模块，比如 a.js 和 b.js，a.js 里面 require b.js，b.js 里面 require a.js</p><p>先执行的 a.js 引用 b.js。b.js 又引用 a.js。但这时候，a.js 还没完成导出模块，就导致 exports 是空</p><p>怎么解决这个问题呢？</p><p>动态加载或者异步加载</p><h2 id="exports-和-module-exports-的区别" tabindex="-1">exports 和 module.exports 的区别 <a class="header-anchor" href="#exports-和-module-exports-的区别" aria-label="Permalink to &quot;exports 和 module.exports 的区别&quot;">​</a></h2><p>exports 和 module.exports 都是在当前模块中定义的变量，exports 是对 module.exports 的引用，所以对 exports 进行赋值，会导致 exports 操作的不再是 module.exports 的引用。</p><p>理想情况下是通过 exports = {} 直接赋值，不需要在 exports.a = xxx 每一个属性，但是如上我们看到了这种方式是无效的。为什么会这样？实际这个是 js 本身的特性决定的。</p><p>通过上述讲解都知道 exports ， module 和 require 作为形参的方式传入到 js 模块中。我们直接 exports = {} 修改 exports ，等于重新赋值了形参，那么会重新赋值一份，但是不会在引用原来的形参。举一个简单的例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">myExports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  myExports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;我不是外星人&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myExports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;alien&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(myExports);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myExports);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出{name:&#39;alien&#39;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#E36209;">myExports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  myExports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;我不是外星人&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myExports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;alien&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(myExports);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myExports);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出{name:&#39;alien&#39;}</span></span></code></pre></div><p>我们期望修改 myExports ，但是没有任何作用。</p><p>假设 wrap 就是 Commonjs 规范下的包装函数，我们的 js 代码就是包装函数内部的内容。当我们把 myExports 对象传进去，但是直接赋值 myExports = { name:&#39;我不是外星人&#39; } 没有任何作用，相等于内部重新声明一份 myExports 而和外界的 myExports 断绝了关系。所以解释了为什么不能 exports={...} 直接赋值。</p><p>从上述 require 原理实现中，我们知道了 exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports 。那么这就说明在一个文件中，我们最好选择 exports 和 module.exports 两者之一，如果两者同时存在，很可能会造成覆盖的情况发生。比如如下情况：</p><h2 id="既然有了-exports-为何又出了-module-exports" tabindex="-1">既然有了 exports，为何又出了 module.exports ? <a class="header-anchor" href="#既然有了-exports-为何又出了-module-exports" aria-label="Permalink to &quot;既然有了 exports，为何又出了 module.exports ?&quot;">​</a></h2><p>如果我们不想在 commonjs 中导出对象，而是只导出一个类或者一个函数再或者其他属性的情况，那么 module.exports 就更方便了，如上我们知道 exports 会被初始化成一个对象，也就是我们只能在对象上绑定属性，但是我们可以通过 module.exports 自定义导出出对象外的其他类型元素。</p><h2 id="与-exports-相比-module-exports-有什么缺陷" tabindex="-1">与 exports 相比，module.exports 有什么缺陷 ？ <a class="header-anchor" href="#与-exports-相比-module-exports-有什么缺陷" aria-label="Permalink to &quot;与 exports 相比，module.exports 有什么缺陷 ？&quot;">​</a></h2><p>module.exports 当导出一些函数等非对象属性的时候，也有一些风险，就比如循环引用的情况下。对象会保留相同的内存地址，就算一些属性是后绑定的，也能间接通过异步形式访问到。但是如果 module.exports 为一个非对象其他属性类型，在循环引用的时候，就容易造成属性丢失的情况发生了。</p><h2 id="es-module" tabindex="-1">ES Module <a class="header-anchor" href="#es-module" aria-label="Permalink to &quot;ES Module&quot;">​</a></h2><p>Nodejs 借鉴了 Commonjs 实现了模块化 ，从 ES6 开始， JavaScript 才真正意义上有自己的模块化规范， Es Module 的产生有很多优势，比如:</p><p>借助 Es Module 的静态导入导出的优势，实现了 tree shaking。 Es Module 还可以 import() 懒加载方式实现代码分割。</p><p>在 Es Module 中用 export 用来导出模块，import 用来导入模块。但是 export 配合 import 会有很多种组合情况，接下来我们逐一分析一下。</p><h3 id="export" tabindex="-1">export <a class="header-anchor" href="#export" aria-label="Permalink to &quot;export&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//重定向导出 不包括 module内的default</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { name1, name2, ..., nameN } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 重定向命名导出</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { import1 </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name1, import2 </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name2, ..., nameN } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 重定向重命名导出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { name1, name2, …, nameN }; </span><span style="color:#6A737D;">// 与之前声明的变量名绑定 命名导出</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { variable1 </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name1, variable2 </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name2, …, nameN }; </span><span style="color:#6A737D;">// 重命名导出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;name1&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 声明命名导出 或者 var, const，function， function*, class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> expression; </span><span style="color:#6A737D;">// 默认导出</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> } </span><span style="color:#6A737D;">// 或者 function*, class</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name1</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> } </span><span style="color:#6A737D;">// 或者 function*, class</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { name1 </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">, ... }; </span><span style="color:#6A737D;">// 重命名为默认导出</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//重定向导出 不包括 module内的default</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { name1, name2, ..., nameN } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 重定向命名导出</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { import1 </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name1, import2 </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name2, ..., nameN } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 重定向重命名导出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { name1, name2, …, nameN }; </span><span style="color:#6A737D;">// 与之前声明的变量名绑定 命名导出</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { variable1 </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name1, variable2 </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name2, …, nameN }; </span><span style="color:#6A737D;">// 重命名导出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;name1&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 声明命名导出 或者 var, const，function， function*, class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> expression; </span><span style="color:#6A737D;">// 默认导出</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">// 或者 function*, class</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name1</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">// 或者 function*, class</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { name1 </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">, ... }; </span><span style="color:#6A737D;">// 重命名为默认导出</span></span></code></pre></div><p>export 规则</p><ul><li>export * from &#39;&#39; 或者 export {} from &#39;&#39;，重定向导出，重定向的命名并不能在本模块使用，只是搭建一个桥梁，例如：这个 a 并不能在本模块内使用</li><li>export {}， 与变量名绑定，命名导出</li><li>export Declaration，声明的同时，命名导出， Declaration 就是： var, let, const, function, function*, class 这一类的声明语句</li><li>export default AssignmentExpression，默认导出， AssignmentExpression 的 范围很广，可以大致理解 为除了声明 Declaration（其实两者是有交叉的），a=2,i++,i/4,a===b,obj[name],name in obj,func(),new P(),[1,2,3],function(){}等等很多</li></ul><h3 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 命名导出 module.js</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { a, b }</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 命名导入 main.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { a, b, c } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// a: 1  b: 2  c: 3</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { a </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> newA, b, c </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> newC } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// newA: 1  b: 2  newC: 3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 默认导出 module.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 默认导入 main.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> defaultExport </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// defaultExport: 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 混合导出 module.js</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { a }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { b }</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 混合导入 main.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> defaultExport, { a, b, c </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> newC} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//defaultExport: [1, 2, 3]  a: 1  b: 2  newC: 3</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> defaultExport, </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//defaultExport: [1, 2, 3]  name: { a: 1, b: 2, c: 3 }</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// name: { a: 1, b: 2, c: 3, default: [1, 2, 3] }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// module.js</span></span>
<span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//副作用 只运行一个模块</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 执行module 不导出值  多次调用module.js只运行一次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//动态导入(异步导入)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promise </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 命名导出 module.js</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { a, b }</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 命名导入 main.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { a, b, c } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// a: 1  b: 2  c: 3</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { a </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> newA, b, c </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> newC } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// newA: 1  b: 2  newC: 3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 默认导出 module.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 默认导入 main.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> defaultExport </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// defaultExport: 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 混合导出 module.js</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { a }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { b }</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 混合导入 main.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> defaultExport, { a, b, c </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> newC} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//defaultExport: [1, 2, 3]  a: 1  b: 2  newC: 3</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> defaultExport, </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//defaultExport: [1, 2, 3]  name: { a: 1, b: 2, c: 3 }</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// name: { a: 1, b: 2, c: 3, default: [1, 2, 3] }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// module.js</span></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//副作用 只运行一个模块</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 执行module 不导出值  多次调用module.js只运行一次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//动态导入(异步导入)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> promise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>import 规则</p><ul><li>import { } from &#39;module&#39;， 导入 module.js 的命名导出</li><li>import defaultExport from &#39;module&#39;， 导入 module.js 的默认导出</li><li>import * as name from &#39;module&#39;， 将 module.js 的的所有导出合并为 name 的对象，key 为导出的命名，默认导出的 key 为 default</li><li>import &#39;module&#39;，副作用，只是运行 module，不为了导出内容例如 polyfill，多次调用次语句只能执行一次</li><li>import(&#39;module&#39;)，动态导入返回一个 Promise，TC39 的 stage-3 阶段被提出 tc39 import</li></ul><h2 id="es-module-特性" tabindex="-1">ES Module 特性 <a class="header-anchor" href="#es-module-特性" aria-label="Permalink to &quot;ES Module 特性&quot;">​</a></h2><h3 id="_1-静态语法" tabindex="-1">1. 静态语法 <a class="header-anchor" href="#_1-静态语法" aria-label="Permalink to &quot;1. 静态语法&quot;">​</a></h3><p>ES6 module 的引入和导出是静态的，import 会自动提升到代码的顶层 ，import , export 不能放在块级作用域或条件语句中。</p><h3 id="_2-执行特性" tabindex="-1">2. 执行特性 <a class="header-anchor" href="#_2-执行特性" aria-label="Permalink to &quot;2. 执行特性&quot;">​</a></h3><p>ES6 module 和 Common.js 一样，对于相同的 js 文件，会保存静态属性。 但是与 Common.js 不同的是 ，CommonJS 模块同步加载并执行模块文件，ES6 模块提前加载并执行模块文件，ES6 模块在预处理阶段分析模块依赖，在执行阶段执行模块，两个阶段都采用深度优先遍历，执行顺序是子 -&gt; 父。</p><h3 id="_3-不能修改-import-导入的属性" tabindex="-1">3.不能修改 import 导入的属性 <a class="header-anchor" href="#_3-不能修改-import-导入的属性" aria-label="Permalink to &quot;3.不能修改 import 导入的属性&quot;">​</a></h3><p>使用 import 被导入的模块运行在严格模式下。</p><p>使用 import 被导入的变量是只读的，可以理解默认为 const 装饰，无法被赋值</p><p>使用 import 被导入的变量是与原变量绑定/引用的，可以理解为 import 导入的变量无论是否为基本类型都是引用传递。</p><h3 id="_4-import-动态引入" tabindex="-1">4. import() 动态引入 <a class="header-anchor" href="#_4-import-动态引入" aria-label="Permalink to &quot;4. import() 动态引入&quot;">​</a></h3><p>import() 返回一个 Promise 对象， 返回的 Promise 的 then 成功回调中，可以获取模块的加载成功信息。我们来简单看一下 import() 是如何使用的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./b&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  result.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./b&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  result.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_5-three-shaking" tabindex="-1">5.three shaking <a class="header-anchor" href="#_5-three-shaking" aria-label="Permalink to &quot;5.three shaking&quot;">​</a></h3><p>Tree Shaking 在 Webpack 中的实现，是用来尽可能的删除没有被使用过的代码，一些被 import 了但其实没有被使用的代码。比如以下场景：</p><p>a.js 中暴露两个方法，addNumber 和 delNumber，但是整个应用中，只用到了 addNumber，那么构建打包的时候，delNumber 将作为没有引用的方法，不被打包进来。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Commonjs 总结</p><p>Commonjs 的特性如下：</p><ul><li>CommonJS 模块由 JS 运行时实现。</li><li>CommonJs 是单个值导出，本质上导出的就是 exports 属性。</li><li>CommonJS 是可以动态加载的，对每一个加载都存在缓存，可以有效的解决循环引用问题。</li><li>CommonJS 模块同步加载并执行模块文件。</li></ul><p>es module 总结</p><p>Es module 的特性如下：</p><ul><li>ES6 Module 静态的，不能放在块级作用域内，代码发生在编译时。</li><li>ES6 Module 的值是动态绑定的，可以通过导出方法修改，可以直 接访问修改结果。</li><li>ES6 Module 可以导出多个属性和方法，可以单个导入导出，混合导入导出。</li><li>ES6 模块提前加载并执行模块文件，</li><li>ES6 Module 导入模块在严格模式下。</li><li>ES6 Module 的特性可以很容易实现 Tree Shaking 和 Code Splitting。</li></ul>`,106),e=[o];function t(r,c,E,y,i,d){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{m as __pageData,F as default};
