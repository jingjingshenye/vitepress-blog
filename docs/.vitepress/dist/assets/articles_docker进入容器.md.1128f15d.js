import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.9f730de1.js";const h=JSON.parse('{"title":"docker 进入容器的方式","description":"","frontmatter":{},"headers":[],"relativePath":"articles/docker进入容器.md","filePath":"articles/docker进入容器.md"}'),l={name:"articles/docker进入容器.md"},o=p(`<h1 id="docker-进入容器的方式" tabindex="-1">docker 进入容器的方式 <a class="header-anchor" href="#docker-进入容器的方式" aria-label="Permalink to &quot;docker 进入容器的方式&quot;">​</a></h1><h3 id="_1-使用-docker-attach-进入-docker-容器" tabindex="-1">1. 使用 docker attach 进入 Docker 容器 <a class="header-anchor" href="#_1-使用-docker-attach-进入-docker-容器" aria-label="Permalink to &quot;1. 使用 docker attach 进入 Docker 容器&quot;">​</a></h3><p>docker attach 命令是 Docker 提供的一种机制，允许用户从一个正在运行的容器中，与容器内的进程进行交互。</p><p>语法：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">attach</span><span style="color:#E1E4E8;"> [OPTIONS] CONTAINER</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">OPTIONS:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-i,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--interactive=false</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">保持STDIN打开，通常与-t一起使用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-t,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--tty=false</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">为STDIN/STDOUT/STDERR分配一个伪终端</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-u,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--detach-keys=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">分离键，用于在attach模式下将键发送到容器中</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">attach</span><span style="color:#24292E;"> [OPTIONS] CONTAINER</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">OPTIONS:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-i,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--interactive=false</span><span style="color:#24292E;">  </span><span style="color:#032F62;">保持STDIN打开，通常与-t一起使用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-t,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--tty=false</span><span style="color:#24292E;">          </span><span style="color:#032F62;">为STDIN/STDOUT/STDERR分配一个伪终端</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-u,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--detach-keys=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">     </span><span style="color:#032F62;">分离键，用于在attach模式下将键发送到容器中</span></span></code></pre></div><p>使用示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-itd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ubuntu:14.04</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;">#然后我们使用docker ps查看到该容器信息，接下来就使用docker attach进入该容器</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">attach</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">44</span><span style="color:#9ECBFF;">fc0f0582d9</span></span>
<span class="line"><span style="color:#6A737D;"># 　　但在，使用该命令有一个问题。当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 因为这个原因，所以docker attach命令不太适合于生产环境，平时自己开发应用时可以使用该命令。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-itd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ubuntu:14.04</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;">#然后我们使用docker ps查看到该容器信息，接下来就使用docker attach进入该容器</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">attach</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">44</span><span style="color:#032F62;">fc0f0582d9</span></span>
<span class="line"><span style="color:#6A737D;"># 　　但在，使用该命令有一个问题。当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 因为这个原因，所以docker attach命令不太适合于生产环境，平时自己开发应用时可以使用该命令。</span></span></code></pre></div><h3 id="_2-使用-docker-exec-进入-docker-容器" tabindex="-1">2. 使用 docker exec 进入 Docker 容器 <a class="header-anchor" href="#_2-使用-docker-exec-进入-docker-容器" aria-label="Permalink to &quot;2. 使用 docker exec 进入 Docker 容器&quot;">​</a></h3><p>docker exec 命令是 Docker 提供的一种机制，允许用户在一个正在运行的容器中，以命令的形式运行一个命令。</p><p>语法：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> [OPTIONS] CONTAINER COMMAND [ARG...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">OPTIONS:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-d,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--detach=false</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">后台运行容器，并返回容器ID</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-i,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--interactive=false</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">保持STDIN打开，通常与-t一起使用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-t,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--tty=false</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">为STDIN/STDOUT/STDERR分配一个伪终端</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-u,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--user=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">             </span><span style="color:#9ECBFF;">指定执行命令的用户</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-w,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--workdir=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">指定命令运行时的工作目录</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> [OPTIONS] CONTAINER COMMAND [ARG...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">OPTIONS:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-d,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--detach=false</span><span style="color:#24292E;">        </span><span style="color:#032F62;">后台运行容器，并返回容器ID</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-i,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--interactive=false</span><span style="color:#24292E;">   </span><span style="color:#032F62;">保持STDIN打开，通常与-t一起使用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-t,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--tty=false</span><span style="color:#24292E;">           </span><span style="color:#032F62;">为STDIN/STDOUT/STDERR分配一个伪终端</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-u,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--user=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">             </span><span style="color:#032F62;">指定执行命令的用户</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-w,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--workdir=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">          </span><span style="color:#032F62;">指定命令运行时的工作目录</span></span></code></pre></div><p>使用示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">44</span><span style="color:#9ECBFF;">fc0f0582d9</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># sudo docker ps</span></span>
<span class="line"><span style="color:#6A737D;"># sudo docker exec -it 775c7c9ee1e1 /bin/bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">44</span><span style="color:#032F62;">fc0f0582d9</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># sudo docker ps</span></span>
<span class="line"><span style="color:#6A737D;"># sudo docker exec -it 775c7c9ee1e1 /bin/bash</span></span></code></pre></div>`,13),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const C=s(l,[["render",c]]);export{h as __pageData,C as default};
